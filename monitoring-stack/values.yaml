# Values for monitoring-stack Helm chart
# Enable or disable the components
kube-prometheus-stack:
  enabled: true
  
  # Prometheus configuration
  prometheus:
    prometheusSpec:
      retention: 15d
      resources:
        requests:
          memory: 256Mi
          cpu: 100m
        limits:
          memory: 1Gi
          cpu: 500m
      # Adding security context to fix permissions
      securityContext:
        fsGroup: 65534  # nobody user
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: standard
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 10Gi
      # Add service monitors as needed
      additionalServiceMonitors: []
      # Example service monitor:
      # - name: "example-app"
      #   selector:
      #     matchLabels:
      #       app: example-app
      #   endpoints:
      #     - port: metrics
      #       interval: 30s
      #       path: /metrics
  
  # Grafana configuration
  grafana:
    adminPassword: "admin" # Change this to a secure password
    persistence:
      enabled: true
      size: 5Gi
      storageClassName: standard
    # Add security context for Grafana
    securityContext:
      runAsUser: 472
      runAsGroup: 472
      fsGroup: 472
    # Init container to ensure correct permissions
    extraInitContainers:
      - name: init-chmod-data
        image: busybox:latest
        command:
          - sh
          - -c
          - |
            mkdir -p /var/lib/grafana
            chown -R 472:472 /var/lib/grafana
            chmod -R 755 /var/lib/grafana
        securityContext:
          runAsUser: 0
        volumeMounts:
          - name: storage
            mountPath: /var/lib/grafana
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
          - name: 'default'
            orgId: 1
            folder: ''
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/default
    
    # Add default dashboards
    dashboards:
      default:
        kubernetes-cluster:
          gnetId: 6417
          revision: 1
          datasource: Prometheus
        node-exporter:
          gnetId: 1860
          revision: 27
          datasource: Prometheus
    
    # Add datasources
    datasources:
      datasources.yaml:
        apiVersion: 1
        datasources:
          - name: Prometheus
            type: prometheus
            url: http://monitoring-stack-kube-prometheus-stack-prometheus:9090
            access: proxy
            isDefault: true
            
  # AlertManager configuration
  alertmanager:
    enabled: true
    alertmanagerSpec:
      securityContext:
        fsGroup: 65534  # nobody user
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: standard
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 1Gi

  # Node Exporter configuration
  nodeExporter:
    enabled: true
    
  # kube-state-metrics configuration
  kubeStateMetrics:
    enabled: true

# Default namespace monitoring
defaultNamespaceMonitor:
  enabled: true
  scrapeInterval: 30s
  metricsPaths:
    - name: metrics
      path: /metrics
    - name: http
      path: /metrics
  
# Loki stack for log aggregation
loki-stack:
  enabled: true
  
  # Configure Loki
  loki:
    persistence:
      enabled: true
      size: 10Gi
      storageClassName: standard
    # Set the security context directly for main container
    securityContext:
      runAsUser: 10001
      runAsGroup: 10001
      fsGroup: 10001
      runAsNonRoot: true
    # Add init container to set proper permissions
    extraInitContainers:
      - name: init-chmod-data
        image: busybox:latest
        imagePullPolicy: IfNotPresent
        command:
          - sh
          - -c
          - |
            mkdir -p /data/loki
            chown -R 10001:10001 /data
            chmod -R 755 /data
            ls -la /data
        securityContext:
          runAsUser: 0
          privileged: false
        volumeMounts:
          - name: storage
            mountPath: "/data"
    # Additional configuration to help with permissions
    podSecurityContext:
      runAsUser: 10001
      runAsGroup: 10001
      fsGroup: 10001
    
  # Configure Promtail
  promtail:
    enabled: true
    config:
      clients:
      - url: http://monitoring-stack-loki.monitoring:3100/loki/api/v1/push
    
  # Add Loki as a datasource to Grafana
  grafana:
    enabled: false # Disabled because we're using the Grafana from kube-prometheus-stack
    sidecar:
      datasources:
        enabled: true

# Ingress configurations
ingress:
  # Grafana Ingress
  grafana:
    enabled: false # Set to true to enable the Grafana ingress
    className: "nginx" # Set to your ingress controller class
    annotations:
      kubernetes.io/ingress.class: nginx
      # cert-manager annotations for automatic TLS certificates
      # cert-manager.io/cluster-issuer: letsencrypt-prod
    hosts:
      - host: grafana.example.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: grafana-tls
        hosts:
          - grafana.example.com

  # Prometheus Ingress
  prometheus:
    enabled: false # Set to true to enable the Prometheus ingress
    className: "nginx" # Set to your ingress controller class
    annotations:
      kubernetes.io/ingress.class: nginx
      # Enable authentication for Prometheus UI access
      # nginx.ingress.kubernetes.io/auth-type: basic
      # nginx.ingress.kubernetes.io/auth-secret: prometheus-basic-auth
      # nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
    hosts:
      - host: prometheus.example.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: prometheus-tls
        hosts:
          - prometheus.example.com
